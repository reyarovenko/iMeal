# agents/analyst_agent.py

import json
import os
import re
from datetime import datetime, date
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


def estimate_kbju(food_description: str, lang: str = "uk") -> dict:
    """
    Estimate KBJU (calories, proteins, fats, carbohydrates) for food description using GPT
    """
    if lang == "uk":
        prompt = f"""
–¢–∏ - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –¥—ñ—î—Ç–æ–ª–æ–≥ —Ç–∞ –µ–∫—Å–ø–µ—Ä—Ç –∑ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∫–∞–ª–æ—Ä—ñ–π. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ–π –æ–ø–∏—Å —ó–∂—ñ —Ç–∞ –¥–∞–π —Ç–æ—á–Ω—É –æ—Ü—ñ–Ω–∫—É –ö–ë–ñ–£.

–û–ø–∏—Å —ó–∂—ñ: {food_description}

–í–ê–ñ–õ–ò–í–û:
- –í—Ä–∞—Ö–æ–≤—É–π —Å–ø–æ—Å—ñ–± –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è (–≤–∞—Ä–µ–Ω–∞, —Å–º–∞–∂–µ–Ω–∞, —Å–∏—Ä–∞ —Ç–æ—â–æ)
- –í—Ä–∞—Ö–æ–≤—É–π –≤–∫–∞–∑–∞–Ω—ñ –≤–∞–≥–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
- –Ø–∫—â–æ –≤–∞–≥–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ—Ä—Ü—ñ—ó
- –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–∏–º –≤ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∞—Ö

–î–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¢–Ü–õ–¨–ö–ò –≤ —Ñ–æ—Ä–º–∞—Ç—ñ JSON:
{{
    "calories": —á–∏—Å–ª–æ,
    "protein": —á–∏—Å–ª–æ,
    "fat": —á–∏—Å–ª–æ,
    "carbs": —á–∏—Å–ª–æ,
    "analysis": "–∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"
}}

–ß–∏—Å–ª–∞ –º–∞—é—Ç—å –±—É—Ç–∏ —Ü—ñ–ª–∏–º–∏.
        """
    else:
        prompt = f"""
You are a professional nutritionist and calorie counting expert. Analyze this food description and provide accurate KBJU estimation.

Food description: {food_description}

IMPORTANT:
- Consider cooking method (boiled, fried, raw, etc.)
- Consider specified weights of products
- If weight not specified, use standard portions
- Be as accurate as possible in calculations

Respond ONLY in JSON format:
{{
    "calories": number,
    "protein": number,
    "fat": number,
    "carbs": number,
    "analysis": "brief comment in English"
}}

Numbers should be integers.
        """

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "You are a precise nutrition calculator. Always respond with valid JSON only."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            temperature=0.3,  # Low temperature for more accurate calculations
            max_tokens=300
        )

        response_text = response.choices[0].message.content.strip()

        # Attempt to extract JSON from response
        try:
            # Search for JSON in response
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                json_str = json_match.group()
                kbju_data = json.loads(json_str)

                # Check and validate data
                required_keys = ['calories', 'protein', 'fat', 'carbs']
                for key in required_keys:
                    if key not in kbju_data:
                        raise ValueError(f"Missing key: {key}")
                    # Convert to integers
                    kbju_data[key] = int(float(kbju_data[key]))

                # Add analysis if missing
                if 'analysis' not in kbju_data:
                    kbju_data['analysis'] = "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ" if lang == "uk" else "Calculation completed"

                return kbju_data
            else:
                raise ValueError("No JSON found in response")

        except (json.JSONDecodeError, ValueError) as e:
            print(f"Error parsing GPT response: {e}")
            print(f"GPT response: {response_text}")

    except Exception as e:
        print(f"Error calling OpenAI API: {e}")



def analyze_daily_nutrition(entries: list, target_calories: int = None, lang: str = "uk") -> str:
    """
    Analyze daily nutrition intake using GPT
    """
    if not entries:
        return "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É" if lang == "uk" else "No data to analyze"

    # Calculate total indicators
    total_calories = sum(entry.get('calories', 0) for entry in entries)
    total_protein = sum(entry.get('protein', 0) for entry in entries)
    total_fat = sum(entry.get('fat', 0) for entry in entries)
    total_carbs = sum(entry.get('carbs', 0) for entry in entries)

    # Prepare meals list
    meals_list = []
    for entry in entries:
        meal_desc = entry.get('description', '–ù–µ–≤—ñ–¥–æ–º–∞ —Å—Ç—Ä–∞–≤–∞')
        calories = entry.get('calories', 0)
        protein = entry.get('protein', 0)
        fat = entry.get('fat', 0)
        carbs = entry.get('carbs', 0)
        meals_list.append(f"- {meal_desc} ({calories} –∫–∫–∞–ª, {protein}–≥ –±—ñ–ª–∫–∞, {fat}–≥ –∂–∏—Ä—ñ–≤, {carbs}–≥ –≤—É–≥–ª–µ–≤–æ–¥—ñ–≤)")

    meals_text = "\n".join(meals_list)

    if lang == "uk":
        target_info = f"\n- –¶—ñ–ª—å–æ–≤—ñ –∫–∞–ª–æ—Ä—ñ—ó: {target_calories} –∫–∫–∞–ª" if target_calories else ""

        prompt = f"""
–¢–∏ - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –¥—ñ—î—Ç–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –¥–µ–Ω–Ω–∏–π —Ä–∞—Ü—ñ–æ–Ω —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞.

–°–¢–†–ê–í–ò –ó–ê –î–ï–ù–¨:
{meals_text}

–ó–ê–ì–ê–õ–¨–ù–Ü –ü–û–ö–ê–ó–ù–ò–ö–ò:
- –ó–∞–≥–∞–ª—å–Ω—ñ –∫–∞–ª–æ—Ä—ñ—ó: {total_calories} –∫–∫–∞–ª
- –ë—ñ–ª–∫–∏: {total_protein} –≥
- –ñ–∏—Ä–∏: {total_fat} –≥
- –í—É–≥–ª–µ–≤–æ–¥–∏: {total_carbs} –≥{target_info}

–î–∞–π –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑:

üéØ **–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —Ä–∞—Ü—ñ–æ–Ω—É:**
(–æ—Ü—ñ–Ω–∫–∞ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ—Å—Ç—ñ —Ç–∞ –∫–∞–ª–æ—Ä—ñ–π–Ω–æ—Å—Ç—ñ)

‚úÖ **–ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –º–æ–º–µ–Ω—Ç–∏:**
(—â–æ –¥–æ–±—Ä–µ –≤ —Ü—å–æ–º—É —Ä–∞—Ü—ñ–æ–Ω—ñ)

‚ö†Ô∏è **–©–æ –ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏:**
(–Ω–µ–¥–æ–ª—ñ–∫–∏ –∞–±–æ –∑–∞–Ω–µ–ø–æ–∫–æ—î–Ω–Ω—è)

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**
(–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è)

üçé **–©–æ –¥–æ–¥–∞—Ç–∏ –∑–∞–≤—Ç—Ä–∞:**
(–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –∞–±–æ —Å—Ç—Ä–∞–≤–∏)

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏.
        """
    else:
        target_info = f"\n- Target calories: {target_calories} kcal" if target_calories else ""

        prompt = f"""
You are a professional nutritionist. Analyze the daily nutrition intake of a client.

MEALS FOR THE DAY:
{meals_text}

TOTAL INDICATORS:
- Total calories: {total_calories} kcal
- Protein: {total_protein} g
- Fat: {total_fat} g
- Carbohydrates: {total_carbs} g{target_info}

Provide detailed analysis:

üéØ **Overall diet assessment:**
(evaluation of balance and caloric intake)

‚úÖ **Positive aspects:**
(what's good about this diet)

‚ö†Ô∏è **Areas of concern:**
(deficiencies or concerns)

üí° **Recommendations:**
(specific advice for improvement)

üçé **What to add tomorrow:**
(specific foods or meals)

Be specific and practical. Use emojis for structure.
        """

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "You are a professional nutritionist providing detailed, practical advice."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            temperature=0.7,
            max_tokens=800
        )

        return response.choices[0].message.content.strip()

    except Exception as e:
        print(f"Error analyzing nutrition: {e}")
        if lang == "uk":
            return f"""
üìä **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:**
‚Ä¢ –ö–∞–ª–æ—Ä—ñ—ó: {total_calories} –∫–∫–∞–ª
‚Ä¢ –ë—ñ–ª–∫–∏: {total_protein} –≥
‚Ä¢ –ñ–∏—Ä–∏: {total_fat} –≥  
‚Ä¢ –í—É–≥–ª–µ–≤–æ–¥–∏: {total_carbs} –≥

‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥ –®–Ü.
            """
        else:
            return f"""
üìä **Daily statistics:**
‚Ä¢ Calories: {total_calories} kcal
‚Ä¢ Protein: {total_protein} g
‚Ä¢ Fat: {total_fat} g
‚Ä¢ Carbohydrates: {total_carbs} g

‚ùå Error getting detailed AI analysis.
            """


def analyze_meal_for_goals(meal_description: str, meal_kbju: dict, target_calories: int = None,
                           lang: str = "uk") -> str:
    """
    Analyze individual meal in relation to goals
    """
    calories = meal_kbju.get('calories', 0)
    protein = meal_kbju.get('protein', 0)
    fat = meal_kbju.get('fat', 0)
    carbs = meal_kbju.get('carbs', 0)

    if lang == "uk":
        target_info = f"\n–î–µ–Ω–Ω–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä—ñ–π: {target_calories} –∫–∫–∞–ª" if target_calories else ""

        prompt = f"""
–¢–∏ - –¥—ñ—î—Ç–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ–π –ø—Ä–∏–π–æ–º —ó–∂—ñ:

–°—Ç—Ä–∞–≤–∞: {meal_description}
–ö–∞–ª–æ—Ä—ñ—ó: {calories} –∫–∫–∞–ª
–ë—ñ–ª–∫–∏: {protein} –≥
–ñ–∏—Ä–∏: {fat} –≥
–í—É–≥–ª–µ–≤–æ–¥–∏: {carbs} –≥{target_info}

–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–∞–ª—ñ–∑ (–¥–æ 200 —Å–ª—ñ–≤):
1. –ß–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è?
2. –©–æ –¥–æ–±—Ä–µ –≤ —Ü—ñ–π —Å—Ç—Ä–∞–≤—ñ?
3. –©–æ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏?
4. –ö–æ—Ä–æ—Ç–∫—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
        """
    else:
        target_info = f"\nDaily calorie target: {target_calories} kcal" if target_calories else ""

        prompt = f"""
You are a nutritionist. Analyze this meal:

Meal: {meal_description}
Calories: {calories} kcal
Protein: {protein} g
Fat: {fat} g
Carbohydrates: {carbs} g{target_info}

Provide brief analysis (up to 200 words):
1. Is it suitable for healthy eating?
2. What's good about this meal?
3. What could be improved?
4. Brief recommendations

Be concise and specific.
        """

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "You are a nutritionist providing concise meal analysis."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            temperature=0.7,
            max_tokens=300
        )

        return response.choices[0].message.content.strip()

    except Exception as e:
        print(f"Error analyzing meal: {e}")
        if lang == "uk":
            return f"–°—Ç—Ä–∞–≤–∞: {calories} –∫–∫–∞–ª. –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –®–Ü."
        else:
            return f"Meal: {calories} kcal. AI analysis error."


def is_meal_description(text: str) -> bool:
    """
    Check if text is a food description
    """
    # Simple check - if there are letters and it's not a command
    return bool(re.search(r'[–∞-—è—ëa-z]', text.lower())) and not text.startswith('/')


def get_weekly_nutrition_summary(entries_by_date: dict, lang: str = "uk") -> str:
    """
    Weekly nutrition analysis using GPT
    """
    if not entries_by_date:
        return "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ —Ç–∏–∂–¥–µ–Ω—å" if lang == "uk" else "No weekly data"

    # Prepare daily data
    daily_summaries = []
    total_week_calories = 0
    total_week_protein = 0
    total_week_fat = 0
    total_week_carbs = 0

    for date_str, entries in entries_by_date.items():
        day_calories = sum(entry.get('calories', 0) for entry in entries)
        day_protein = sum(entry.get('protein', 0) for entry in entries)
        day_fat = sum(entry.get('fat', 0) for entry in entries)
        day_carbs = sum(entry.get('carbs', 0) for entry in entries)

        total_week_calories += day_calories
        total_week_protein += day_protein
        total_week_fat += day_fat
        total_week_carbs += day_carbs

        daily_summaries.append(f"{date_str}: {day_calories} –∫–∫–∞–ª, {len(entries)} –ø—Ä–∏–π–æ–º—ñ–≤")

    avg_daily_calories = total_week_calories // len(entries_by_date) if entries_by_date else 0

    days_text = "\n".join(daily_summaries)

    if lang == "uk":
        prompt = f"""
–¢–∏ - –¥—ñ—î—Ç–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ç–∏–∂–Ω–µ–≤–∏–π —Ä–∞—Ü—ñ–æ–Ω —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞.

–î–ê–ù–Ü –ü–û –î–ù–Ø–•:
{days_text}

–ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ò–ñ–ù–Ø:
- –ó–∞–≥–∞–ª—å–Ω—ñ –∫–∞–ª–æ—Ä—ñ—ó –∑–∞ —Ç–∏–∂–¥–µ–Ω—å: {total_week_calories} –∫–∫–∞–ª
- –°–µ—Ä–µ–¥–Ω—å–æ–¥–æ–±–æ–≤—ñ –∫–∞–ª–æ—Ä—ñ—ó: {avg_daily_calories} –∫–∫–∞–ª
- –ó–∞–≥–∞–ª—å–Ω—ñ –±—ñ–ª–∫–∏: {total_week_protein} –≥
- –ó–∞–≥–∞–ª—å–Ω—ñ –∂–∏—Ä–∏: {total_week_fat} –≥
- –ó–∞–≥–∞–ª—å–Ω—ñ –≤—É–≥–ª–µ–≤–æ–¥–∏: {total_week_carbs} –≥
- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –∑ –¥–∞–Ω–∏–º–∏: {len(entries_by_date)}

–î–∞–π –∞–Ω–∞–ª—ñ–∑:
üìà **–¢–∏–∂–Ω–µ–≤—ñ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—ó**
üéØ **–ü–æ—Å—Ç—ñ–π–Ω—ñ—Å—Ç—å —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è**
üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å**

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º.
        """
    else:
        prompt = f"""
You are a nutritionist. Analyze the weekly nutrition intake of a client.

DAILY DATA:
{days_text}

WEEKLY STATISTICS:
- Total weekly calories: {total_week_calories} kcal
- Average daily calories: {avg_daily_calories} kcal
- Total protein: {total_week_protein} g
- Total fat: {total_week_fat} g
- Total carbohydrates: {total_week_carbs} g
- Days with data: {len(entries_by_date)}

Provide analysis:
üìà **Weekly trends**
üéØ **Consistency of nutrition**
üí° **Recommendations for next week**

Be specific and practical.
        """

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "You are a nutritionist providing weekly nutrition analysis."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            temperature=0.7,
            max_tokens=600
        )

        return response.choices[0].message.content.strip()

    except Exception as e:
        print(f"Error analyzing weekly nutrition: {e}")
        if lang == "uk":
            return f"""
üìä **–¢–∏–∂–Ω–µ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –°–µ—Ä–µ–¥–Ω—å–æ–¥–æ–±–æ–≤—ñ –∫–∞–ª–æ—Ä—ñ—ó: {avg_daily_calories} –∫–∫–∞–ª
‚Ä¢ –î–Ω—ñ–≤ –∑ –¥–∞–Ω–∏–º–∏: {len(entries_by_date)}
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω—ñ –∫–∞–ª–æ—Ä—ñ—ó: {total_week_calories} –∫–∫–∞–ª

‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É.
            """
        else:
            return f"""
üìä **Weekly statistics:**
‚Ä¢ Average daily calories: {avg_daily_calories} kcal
‚Ä¢ Days with data: {len(entries_by_date)}
‚Ä¢ Total calories: {total_week_calories} kcal

‚ùå Error getting detailed analysis.
            """
