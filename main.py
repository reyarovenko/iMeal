# main.py - FINAL COMPLETE VERSION WITH BUTTON DELETION
import os
import logging
from typing import Dict, List
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Import multi-agent system
try:
    from multiagent_core import SimpleCoordinator
    logger.info("MultiAgent system loaded")
except ImportError as e:
    logger.error(f"Error importing multiagent_core: {e}")

    class SimpleCoordinator:
        def __init__(self):
            self.user_languages = {}
            self.user_states = {}

        async def route_request(self, user_id, action, data):
            return {"status": "success", "message": f"Test: {action}"}

load_dotenv()
coordinator = SimpleCoordinator()

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

def user_has_language(user_id: int) -> bool:
    return user_id in coordinator.user_languages

def is_language_command(text: str) -> bool:
    return text in ["üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá¨üáß English"]

def is_main_menu_command(text: str) -> bool:
    """Main menu commands - WITHOUT deletion buttons"""
    commands = [
        "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫", "üìä Analyst", "üçé –î—ñ—î—Ç–æ–ª–æ–≥", "üçé Dietitian",
        "‚ûï –î–æ–¥–∞—Ç–∏ —ó–∂—É", "‚ûï Add food", "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —ó–∂—É", "üóëÔ∏è Delete food",
        "üìä –ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è", "üìä Daily summary", "üßÆ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä–∞–∂",
        "üßÆ Calculate calories", "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó", "üí° Recommendations",
        "üìã –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", "üìã My profile", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è Back"
    ]
    return text in commands

def is_delete_button(text: str) -> bool:
    """Check deletion button"""
    # Looking for pattern: starts with emoji (üåÖüåûüåôüç™) and contains calories
    import re
    return bool(re.match(r'^[üåÖüåûüåôüç™].*\(\d+\s*(–∫–∫–∞–ª|kcal)\)$', text))

# ============================================================================
# MENUS
# ============================================================================

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = coordinator.user_languages.get(user_id, "uk")

    if lang == "uk":
        keyboard = [["üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫", "üçé –î—ñ—î—Ç–æ–ª–æ–≥"]]
        text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n\nüìä –ê–Ω–∞–ª—ñ—Ç–∏–∫ - –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ö–ë–ñ–£\nüçé –î—ñ—î—Ç–æ–ª–æ–≥ - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"
    else:
        keyboard = [["üìä Analyst", "üçé Dietitian"]]
        text = "üè† Main Menu\n\nüìä Analyst - KBJU calculation\nüçé Dietitian - recommendations"

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)

async def show_analyst_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, lang: str):
    if lang == "uk":
        keyboard = [
            ["‚ûï –î–æ–¥–∞—Ç–∏ —ó–∂—É", "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —ó–∂—É"],
            ["üìä –ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ]
        text = "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    else:
        keyboard = [
            ["‚ûï Add food", "üóëÔ∏è Delete food"],
            ["üìä Daily summary"],
            ["‚¨ÖÔ∏è Back"]
        ]
        text = "üìä Analyst\n\nChoose action:"

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)

async def show_dietitian_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, lang: str):
    if lang == "uk":
        keyboard = [
            ["üßÆ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä–∞–∂", "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"],
            ["üìã –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ]
        text = "üçé –î—ñ—î—Ç–æ–ª–æ–≥\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    else:
        keyboard = [
            ["üßÆ Calculate calories", "üí° Recommendations"],
            ["üìã My profile", "‚¨ÖÔ∏è Back"]
        ]
        text = "üçé Dietitian\n\nChoose action:"

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)

# ============================================================================
# RESULT HANDLER - COMPLETELY FIXED
# ============================================================================

async def send_result(update: Update, result: Dict, lang: str):
    """COMPLETELY FIXED result sender"""
    logger.info(f"Sending result: {result}")

    try:
        status = result.get("status", "unknown")

        if status == "success":
            # 1. KBJU result (food addition)
            if "kbju" in result:
                kbju = result["kbju"]
                if lang == "uk":
                    message = f"""‚úÖ –°—Ç—Ä–∞–≤—É –¥–æ–¥–∞–Ω–æ!

üìä –ö–∞–ª–æ—Ä—ñ—ó: {kbju.get('calories', 0)} –∫–∫–∞–ª
ü•© –ë—ñ–ª–∫–∏: {kbju.get('protein', 0)} –≥  
üßà –ñ–∏—Ä–∏: {kbju.get('fat', 0)} –≥
üçû –í—É–≥–ª–µ–≤–æ–¥–∏: {kbju.get('carbs', 0)} –≥

üí¨ {kbju.get('analysis', '')}"""
                else:
                    message = f"""‚úÖ Meal added!

üìä Calories: {kbju.get('calories', 0)} kcal
ü•© Protein: {kbju.get('protein', 0)} g
üßà Fat: {kbju.get('fat', 0)} g
üçû Carbs: {kbju.get('carbs', 0)} g

üí¨ {kbju.get('analysis', '')}"""

            # 2. Dish list for deletion WITH BUTTONS
            elif "entries" in result and result.get("action") == "show_delete_list":
                entries = result["entries"]

                # Save for deletion
                coordinator.user_states[update.effective_user.id] = "waiting_delete_choice"
                coordinator.user_states[f"{update.effective_user.id}_delete_entries"] = entries

                if lang == "uk":
                    message = "üóëÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:"
                    keyboard = []
                    for entry_data in entries:
                        entry = entry_data["entry"]
                        # Create SIMPLE buttons without numbers
                        button_text = f"{entry['description']} ({entry['calories']} –∫–∫–∞–ª)"
                        # Trim if too long
                        if len(button_text) > 50:
                            description = entry['description'][:35] + "..."
                            button_text = f"{description} ({entry['calories']} –∫–∫–∞–ª)"
                        keyboard.append([KeyboardButton(button_text)])
                    keyboard.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
                else:
                    message = "üóëÔ∏è Choose meal to delete:"
                    keyboard = []
                    for entry_data in entries:
                        entry = entry_data["entry"]
                        button_text = f"{entry['description']} ({entry['calories']} kcal)"
                        if len(button_text) > 50:
                            description = entry['description'][:35] + "..."
                            button_text = f"{description} ({entry['calories']} kcal)"
                        keyboard.append([KeyboardButton(button_text)])
                    keyboard.append([KeyboardButton("‚¨ÖÔ∏è Back")])

                try:
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
                    await update.message.reply_text(message, reply_markup=reply_markup)
                    logger.info("Delete buttons sent")
                    return
                except Exception as e:
                    logger.error(f"Error with buttons: {e}")
                    # Fallback without buttons
                    message += "\n\n"
                    for i, entry_data in enumerate(entries):
                        entry = entry_data["entry"]
                        message += f"{i + 1}. {entry['description']} ({entry['calories']} –∫–∫–∞–ª)\n"

            # 3. Daily report
            elif "summary" in result:
                message = result["summary"]

            # 4. Recommendations
            elif "recommendations" in result:
                message = result["recommendations"]

            # 5. User profile
            elif "profile" in result:
                profile = result["profile"]
                calories = profile.get("calories", {})
                if lang == "uk":
                    message = f"""üìã –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:

üë§ –î–∞–Ω—ñ:
‚Ä¢ –í—ñ–∫: {profile.get('age')} —Ä–æ–∫—ñ–≤
‚Ä¢ –í–∞–≥–∞: {profile.get('weight')} –∫–≥
‚Ä¢ –ó—Ä—ñ—Å—Ç: {profile.get('height')} —Å–º
‚Ä¢ –°—Ç–∞—Ç—å: {"–∂—ñ–Ω–∫–∞" if profile.get('gender') == 'female' else "—á–æ–ª–æ–≤—ñ–∫"}

üìä –î–µ–Ω–Ω–∏–π –∫–∞–ª–æ—Ä–∞–∂:
‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞–≥–∏: {calories.get('maintain', 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –î–ª—è —Å—Ö—É–¥–Ω–µ–Ω–Ω—è: {calories.get('lose', 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –î–ª—è –Ω–∞–±–æ—Ä—É –≤–∞–≥–∏: {calories.get('gain', 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å

üïê –û–Ω–æ–≤–ª–µ–Ω–æ: {profile.get('updated_at', 'N/A')[:16].replace('T', ' ')}"""
                else:
                    message = f"""üìã Your profile:

üë§ Data:
‚Ä¢ Age: {profile.get('age')} years
‚Ä¢ Weight: {profile.get('weight')} kg
‚Ä¢ Height: {profile.get('height')} cm
‚Ä¢ Gender: {profile.get('gender')}

üìä Daily calories:
‚Ä¢ Maintain: {calories.get('maintain', 'N/A')} kcal/day
‚Ä¢ Lose: {calories.get('lose', 'N/A')} kcal/day
‚Ä¢ Gain: {calories.get('gain', 'N/A')} kcal/day

üïê Updated: {profile.get('updated_at', 'N/A')[:16].replace('T', ' ')}"""

            # 6. Calorie calculation result
            elif "calories" in result:
                calories = result["calories"]
                user_data = result.get("user_data", {})
                if lang == "uk":
                    message = f"""üßÆ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–∞–ª–æ—Ä—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!

üë§ –í–∞—à—ñ –¥–∞–Ω—ñ:
‚Ä¢ –í—ñ–∫: {user_data.get('age')} —Ä–æ–∫—ñ–≤
‚Ä¢ –í–∞–≥–∞: {user_data.get('weight')} –∫–≥
‚Ä¢ –ó—Ä—ñ—Å—Ç: {user_data.get('height')} —Å–º
‚Ä¢ –°—Ç–∞—Ç—å: {"–∂—ñ–Ω–∫–∞" if user_data.get('gender') == 'female' else "—á–æ–ª–æ–≤—ñ–∫"}

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:
‚Ä¢ –ë–∞–∑–æ–≤–∏–π –º–µ—Ç–∞–±–æ–ª—ñ–∑–º: {calories['bmr']} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞–≥–∏: {calories['maintain']} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –î–ª—è —Å—Ö—É–¥–Ω–µ–Ω–Ω—è: {calories['lose']} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –î–ª—è –Ω–∞–±–æ—Ä—É –≤–∞–≥–∏: {calories['gain']} –∫–∫–∞–ª/–¥–µ–Ω—å

‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!"""
                else:
                    message = f"""üßÆ Calorie calculation completed!

üë§ Your data:
‚Ä¢ Age: {user_data.get('age')} years
‚Ä¢ Weight: {user_data.get('weight')} kg
‚Ä¢ Height: {user_data.get('height')} cm
‚Ä¢ Gender: {user_data.get('gender')}

üìä Results:
‚Ä¢ Basal metabolism: {calories['bmr']} kcal/day
‚Ä¢ Maintain weight: {calories['maintain']} kcal/day
‚Ä¢ Lose weight: {calories['lose']} kcal/day
‚Ä¢ Gain weight: {calories['gain']} kcal/day

‚úÖ Profile saved!"""

            # 7. Regular message
            else:
                message = result.get("message", "‚úÖ –ì–æ—Ç–æ–≤–æ!" if lang == "uk" else "‚úÖ Done!")

        elif status == "error":
            message = f"‚ùå {result.get('message', '–ü–æ–º–∏–ª–∫–∞' if lang == 'uk' else 'Error')}"

        elif status == "no_data":
            if lang == "uk":
                message = "üì≠ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n\n–î–æ–¥–∞–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É —ó–∂—É —á–µ—Ä–µ–∑ '–î–æ–¥–∞—Ç–∏ —ó–∂—É'"
            else:
                message = "üì≠ No data for today\n\nAdd food first through 'Add food'"

        elif status == "no_profile":
            if lang == "uk":
                message = "‚ùå –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n\n–°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑—Ä–∞—Ö—É–π—Ç–µ –∫–∞–ª–æ—Ä–∞–∂ —á–µ—Ä–µ–∑ '–î—ñ—î—Ç–æ–ª–æ–≥' ‚Üí '–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä–∞–∂'"
            else:
                message = "‚ùå Profile not found\n\nCalculate calories first through 'Dietitian' ‚Üí 'Calculate calories'"

        else:
            message = result.get("message", str(result))

        # Send message
        await update.message.reply_text(message)
        logger.info("Result sent successfully")

    except Exception as e:
        logger.error(f"Error in send_result: {e}")
        error_msg = "‚ùå –ü–æ–º–∏–ª–∫–∞" if lang == "uk" else "‚ùå Error"
        try:
            await update.message.reply_text(error_msg)
        except:
            logger.error("Failed to send error message")

# ============================================================================
# MESSAGE HANDLERS
# ============================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"/start from user {update.effective_user.id}")

    keyboard = [
        [KeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")],
        [KeyboardButton("üá¨üáß English")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("‚¨áÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language:", reply_markup=reply_markup)

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in text:
        coordinator.user_languages[user_id] = "uk"
        await update.message.reply_text("‚úÖ –ú–æ–≤—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞")
        await show_main_menu(update, context)
    elif "English" in text:
        coordinator.user_languages[user_id] = "en"
        await update.message.reply_text("‚úÖ Language set to: English")
        await show_main_menu(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """MAIN MESSAGE HANDLER"""
    user_id = update.effective_user.id
    text = update.message.text
    current_state = coordinator.user_states.get(user_id)

    logger.info(f"User {user_id}: '{text}' (state: {current_state})")

    try:
        # 1. Check language
        if not user_has_language(user_id):
            if is_language_command(text):
                await set_language(update, context)
                return
            else:
                keyboard = [[KeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")], [KeyboardButton("üá¨üáß English")]]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                await update.message.reply_text("‚¨áÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language:", reply_markup=reply_markup)
                return

        lang = coordinator.user_languages[user_id]

        # 2. PRIORITY: user states
        if current_state == "waiting_meal_type":
            await handle_meal_type_selection(update, context, text, lang, user_id)
            return

        elif current_state == "waiting_food":
            await handle_food_description(update, context, text, lang, user_id)
            return

        elif current_state == "waiting_delete_choice":
            await handle_delete_choice(update, context, text, lang, user_id)
            return

        elif current_state and current_state.startswith("calorie_calc"):
            await handle_calorie_calculation(update, context, text, lang, user_id, current_state)
            return

        # 3. Menu commands
        elif is_main_menu_command(text):
            await handle_menu_command(update, context, text, lang, user_id)
            return

        # 4. Unknown command
        else:
            await handle_unknown(update, context, text, lang)

    except Exception as e:
        logger.error(f"Critical error: {e}")
        await handle_error(update, context, user_id)

# ============================================================================
# SPECIFIC HANDLERS
# ============================================================================

async def handle_meal_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, lang: str, user_id: int):
    meal_types = ["üåÖ –°–Ω—ñ–¥–∞–Ω–æ–∫", "üåû –û–±—ñ–¥", "üåô –í–µ—á–µ—Ä—è", "üç™ –ü–µ—Ä–µ–∫—É—Å",
                  "üåÖ Breakfast", "üåû Lunch", "üåô Dinner", "üç™ Snack"]

    if text in meal_types:
        logger.info(f"Meal type selected: {text}")
        coordinator.user_states[f"{user_id}_meal_type"] = text
        coordinator.user_states[user_id] = "waiting_food"

        msg = "üçΩÔ∏è –û–ø–∏—à—ñ—Ç—å —â–æ –≤–∏ —ó–ª–∏:" if lang == "uk" else "üçΩÔ∏è Describe what you ate:"
        await update.message.reply_text(msg)
    else:
        msg = "‚ùå –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —ó–∂—ñ" if lang == "uk" else "‚ùå Select meal type"
        await update.message.reply_text(msg)

async def handle_food_description(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, lang: str, user_id: int):
    logger.info(f"Food description: {text}")

    meal_type = coordinator.user_states.get(f"{user_id}_meal_type", "")
    meal_desc = f"{meal_type}: {text}" if meal_type else text

    # Clear states
    coordinator.user_states[user_id] = None
    coordinator.user_states.pop(f"{user_id}_meal_type", None)

    # Process food
    result = await coordinator.route_request(user_id, "add_meal", {"meal_desc": meal_desc, "lang": lang})
    await send_result(update, result, lang)
    await show_analyst_menu(update, context, lang)

async def handle_delete_choice(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, lang: str, user_id: int):
    """NEW LOGIC for deletion through buttons"""

    # Back button
    if text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è Back"]:
        logger.info("Back button pressed during deletion")
        coordinator.user_states[user_id] = None
        coordinator.user_states.pop(f"{user_id}_delete_entries", None)
        await show_analyst_menu(update, context, lang)
        return

    # Search dish by button text
    entries = coordinator.user_states.get(f"{user_id}_delete_entries", [])

    if entries:
        # Search entry by button content
        selected_entry = None
        selected_index = None

        for entry_data in entries:
            entry = entry_data["entry"]
            # Check if dish description is contained in button text
            if entry['description'] in text and str(entry['calories']) in text:
                selected_entry = entry
                selected_index = entry_data["index"]
                break

        if selected_entry and selected_index is not None:
            logger.info(f"Found meal to delete: {selected_entry['description']}")

            # Delete dish
            result = await coordinator.route_request(user_id, "confirm_delete", {"index": selected_index, "lang": lang})

            # Clear state
            coordinator.user_states[user_id] = None
            coordinator.user_states.pop(f"{user_id}_delete_entries", None)

            await send_result(update, result, lang)
            await show_analyst_menu(update, context, lang)
        else:
            logger.warning(f"Could not find meal to delete: {text}")
            msg = "‚ùå –°—Ç—Ä–∞–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –û–±–µ—Ä—ñ—Ç—å –∑ —Å–ø–∏—Å–∫—É." if lang == "uk" else "‚ùå Meal not found. Choose from list."
            await update.message.reply_text(msg)
    else:
        msg = "‚ùå –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π" if lang == "uk" else "‚ùå List is empty"
        await update.message.reply_text(msg)

async def handle_calorie_calculation(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, lang: str, user_id: int, current_state: str):
    """Handle calorie calculation"""

    if current_state == "calorie_calc_age":
        try:
            age = int(text)
            coordinator.user_states[f"{user_id}_age"] = age
            coordinator.user_states[user_id] = "calorie_calc_weight"
            msg = "‚öñÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É (–∫–≥):" if lang == "uk" else "‚öñÔ∏è Enter your weight (kg):"
            await update.message.reply_text(msg)
        except ValueError:
            msg = "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25)" if lang == "uk" else "‚ùå Enter a number (e.g.: 25)"
            await update.message.reply_text(msg)

    elif current_state == "calorie_calc_weight":
        try:
            weight = float(text)
            coordinator.user_states[f"{user_id}_weight"] = weight
            coordinator.user_states[user_id] = "calorie_calc_height"
            msg = "üìè –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑—Ä—ñ—Å—Ç (—Å–º):" if lang == "uk" else "üìè Enter your height (cm):"
            await update.message.reply_text(msg)
        except ValueError:
            msg = "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 70)" if lang == "uk" else "‚ùå Enter a number (e.g.: 70)"
            await update.message.reply_text(msg)

    elif current_state == "calorie_calc_height":
        try:
            height = int(text)
            coordinator.user_states[f"{user_id}_height"] = height
            coordinator.user_states[user_id] = "calorie_calc_gender"

            if lang == "uk":
                keyboard = [["üë® –ß–æ–ª–æ–≤—ñ–∫", "üë© –ñ—ñ–Ω–∫–∞"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]]
                text_msg = "üë§ –û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å:"
            else:
                keyboard = [["üë® Male", "üë© Female"], ["‚¨ÖÔ∏è Back"]]
                text_msg = "üë§ Choose gender:"

            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(text_msg, reply_markup=reply_markup)
        except ValueError:
            msg = "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 175)" if lang == "uk" else "‚ùå Enter a number (e.g.: 175)"
            await update.message.reply_text(msg)

    elif current_state == "calorie_calc_gender":
        gender_map = {"üë® –ß–æ–ª–æ–≤—ñ–∫": "male", "üë© –ñ—ñ–Ω–∫–∞": "female", "üë® Male": "male", "üë© Female": "female"}

        if text in gender_map:
            coordinator.user_states[f"{user_id}_gender"] = gender_map[text]
            coordinator.user_states[user_id] = "calorie_calc_activity"

            if lang == "uk":
                keyboard = [
                    ["üõã –°–∏–¥—è—á–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è"],
                    ["üö∂ –õ–µ–≥–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"],
                    ["üèÉ –ü–æ–º—ñ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"],
                    ["üí™ –í–∏—Å–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"],
                    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
                ]
                text_msg = "üèÉ –û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:"
            else:
                keyboard = [
                    ["üõã Sedentary lifestyle"],
                    ["üö∂ Light activity"],
                    ["üèÉ Moderate activity"],
                    ["üí™ High activity"],
                    ["‚¨ÖÔ∏è Back"]
                ]
                text_msg = "üèÉ Choose activity level:"

            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(text_msg, reply_markup=reply_markup)
        else:
            msg = "‚ùå –û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å" if lang == "uk" else "‚ùå Choose gender"
            await update.message.reply_text(msg)

    elif current_state == "calorie_calc_activity":
        activity_map = {
            "üõã –°–∏–¥—è—á–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è": 1.2, "üö∂ –õ–µ–≥–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å": 1.375,
            "üèÉ –ü–æ–º—ñ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å": 1.55, "üí™ –í–∏—Å–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å": 1.725,
            "üõã Sedentary lifestyle": 1.2, "üö∂ Light activity": 1.375,
            "üèÉ Moderate activity": 1.55, "üí™ High activity": 1.725
        }

        if text in activity_map:
            # Collect all data
            age = coordinator.user_states.get(f"{user_id}_age")
            weight = coordinator.user_states.get(f"{user_id}_weight")
            height = coordinator.user_states.get(f"{user_id}_height")
            gender = coordinator.user_states.get(f"{user_id}_gender")

            if all([age, weight, height, gender]):
                user_data = {
                    "age": age,
                    "weight": weight,
                    "height": height,
                    "gender": gender,
                    "activity_coefficient": activity_map[text]
                }

                # Clear states
                coordinator.user_states[user_id] = None
                for key in [f"{user_id}_age", f"{user_id}_weight", f"{user_id}_height", f"{user_id}_gender"]:
                    coordinator.user_states.pop(key, None)

                # Calculate calories
                result = await coordinator.route_request(user_id, "calculate_calories", {"user_data": user_data})
                await send_result(update, result, lang)
                await show_dietitian_menu(update, context, lang)
            else:
                msg = "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö" if lang == "uk" else "‚ùå Data error"
                await update.message.reply_text(msg)
        else:
            msg = "‚ùå –û–±–µ—Ä—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å" if lang == "uk" else "‚ùå Choose activity"
            await update.message.reply_text(msg)

async def handle_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, lang: str, user_id: int):
    """Handle menu commands"""
    logger.info(f"Menu command: {text}")

    # Clear states
    coordinator.user_states[user_id] = None

    if text in ["üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫", "üìä Analyst"]:
        await show_analyst_menu(update, context, lang)

    elif text in ["üçé –î—ñ—î—Ç–æ–ª–æ–≥", "üçé Dietitian"]:
        await show_dietitian_menu(update, context, lang)

    elif text in ["‚ûï –î–æ–¥–∞—Ç–∏ —ó–∂—É", "‚ûï Add food"]:
        coordinator.user_states[user_id] = "waiting_meal_type"

        if lang == "uk":
            keyboard = [["üåÖ –°–Ω—ñ–¥–∞–Ω–æ–∫", "üåû –û–±—ñ–¥"], ["üåô –í–µ—á–µ—Ä—è", "üç™ –ü–µ—Ä–µ–∫—É—Å"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]]
            msg = "üçΩÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏–π–æ–º—É —ó–∂—ñ:"
        else:
            keyboard = [["üåÖ Breakfast", "üåû Lunch"], ["üåô Dinner", "üç™ Snack"], ["‚¨ÖÔ∏è Back"]]
            msg = "üçΩÔ∏è Choose meal type:"

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(msg, reply_markup=reply_markup)

    elif text in ["üìä –ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è", "üìä Daily summary"]:
        result = await coordinator.route_request(user_id, "daily_summary", {"lang": lang})
        await send_result(update, result, lang)

    elif text in ["üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —ó–∂—É", "üóëÔ∏è Delete food"]:
        result = await coordinator.route_request(user_id, "delete_meal", {"lang": lang})
        await send_result(update, result, lang)

    elif text in ["üßÆ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä–∞–∂", "üßÆ Calculate calories"]:
        coordinator.user_states[user_id] = "calorie_calc_age"
        msg = "üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫ (—á–∏—Å–ª–æ):" if lang == "uk" else "üë§ Enter your age (number):"
        await update.message.reply_text(msg)

    elif text in ["üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó", "üí° Recommendations"]:
        result = await coordinator.route_request(user_id, "get_recommendations", {"lang": lang})
        await send_result(update, result, lang)

    elif text in ["üìã –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", "üìã My profile"]:
        result = await coordinator.route_request(user_id, "show_profile", {"lang": lang})
        await send_result(update, result, lang)

    elif text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è Back"]:
        await show_main_menu(update, context)

async def handle_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, lang: str):
    """Handle unknown commands"""
    logger.info(f"Unknown: {text}")
    msg = "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞" if lang == "uk" else "‚ùå Unknown command"
    await update.message.reply_text(msg)
    await show_main_menu(update, context)

async def handle_error(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """Handle errors"""
    try:
        lang = coordinator.user_languages.get(user_id, "uk")
        msg = "‚ùå –ü–æ–º–∏–ª–∫–∞" if lang == "uk" else "‚ùå Error"
        await update.message.reply_text(msg)
        coordinator.user_states[user_id] = None
        await show_main_menu(update, context)
    except:
        logger.error("Failed to handle error")

# ============================================================================
# BOT STARTUP
# ============================================================================

def main():
    """Start bot"""
    logger.info("Starting bot...")

    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        print("TELEGRAM_TOKEN not found in .env!")
        return

    logger.info(f"Token: {TOKEN[:10]}...")

    try:
        app = ApplicationBuilder().token(TOKEN).build()

        # Handlers
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        # Error handler
        async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            logger.error(f"Bot error: {context.error}")

        app.add_error_handler(error_handler)

        logger.info("Bot starting...")
        print("Bot running! Press Ctrl+C to stop.")
        app.run_polling(drop_pending_updates=True)

    except Exception as e:
        logger.error(f"Startup error: {e}")
        print(f"Error: {e}")

if __name__ == '__main__':
    main()
